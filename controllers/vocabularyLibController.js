const { GoogleSpreadsheet } = require("google-spreadsheet");
const { JWT } = require("google-auth-library");
const creds = require("../cred.json"); // the file saved above

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: creds.client_email,
  key: creds.private_key,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const doc = new GoogleSpreadsheet(
  "1KHXvB51rhnY15JAAkASCO3JuUmTDKyIoFCI8dsNqxvI",
  serviceAccountAuth
);

exports.getAll = async (req, res, next) => {
  try {
    await doc.loadInfo(); // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    const lib = (await sheet.getRows()) ?? [];
    if (lib.length <= 0) {
      await sheet.setHeaderRow(["name", "meaning"]);
    }
    res.status(200).json({
      status: "success",
      data: {
        data: lib.map((t) => t.toObject()),
        count: lib.length,
      },
    });
  } catch (error) {
    next(error);
  }
};

exports.addNew = async (req, res, next) => {
  try {
    await doc.loadInfo(); // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    const lib = (await sheet.getRows()) ?? [];
    //set header row for get by attribute name
    if (lib.count <= 0) {
      await sheet.setHeaderRow(["name", "meaning"]);
    }
    //flag need to add new row
    let needToAddNewRow = true;

    //check exist vocabulary in lib
    for (let index = 0; index < lib.length; index++) {
      const element = lib[index].toObject();
      if (element["name"] === req.body?.name) {
        if (element["meaning"] !== req.body?.meaning) {
          //if has vocabulary in lib, update with new meaning
          lib[index].set("meaning", req.body?.meaning ?? "");
          await lib[index].save(); // save changes
        }
        needToAddNewRow = false;
        break;
      }
    }
    needToAddNewRow && (await sheet.addRow(req.body));
    res.status(200).json({
      status: "success",
      data: {},
    });
  } catch (error) {
    next(error);
  }
};

exports.deleteEmptyMeaning = async (req, res, next) => {
  try {
    await doc.loadInfo(); // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    const lib = (await sheet.getRows()) ?? [];
    //set header row for get by attribute name
    if (lib.count <= 0) {
      await sheet.setHeaderRow(["name", "meaning"]);
    }
    //check exist vocabulary in lib
    for (let index = 0; index < lib.length; index++) {
      const element = lib[index].toObject();
      console.log(element["meaning"]);
      if (element["meaning"] === undefined || element["name"] === undefined) {
        await lib[index].delete();
      }
    }
    res.status(200).json({
      status: "success",
      data: {},
    });
  } catch (error) {
    next(error);
  }
};
